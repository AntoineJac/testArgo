kongdp:
  image:
     repository: kong/kong-gateway
     tag: "3.1"
     pullPolicy: IfNotPresent

  env:
    database: "off"
    role: data_plane
    # Communication to push config to data-plane (wss)
    cluster_control_plane: kongcp-kong-cluster.cp.svc.cluster.local:8005
    #wss.stargate.starsweb.io
    # Communication to push vitals to control plane
    cluster_telemetry_endpoint: kongcp-kong-clustertelemetry.cp.svc.cluster.local:8006
    # Certificates for cluster communication
    lua_ssl_trusted_certificate: /etc/secrets/kong-dp-cert/tls.crt
    untrusted_lua_sandbox_requires: cjson
    lua_ssl_verify_depth: 2
    log_level: debug
    opentelemetry_tracing: all
    opentelemetry_tracing_sampling_rate: 1
    vitals: on

    cluster_mtls: "pki"
    cluster_cert: /etc/secrets/kong-dp-cert/tls.crt
    cluster_cert_key: /etc/secrets/kong-dp-cert/tls.key
    cluster_ca_cert: /etc/secrets/kong-dp-cert/ca.crt
    cluster_server_name: wss.stargate.starsweb.io

  secretVolumes:
    - kong-dp-cert
    # - kong-ca-cert
    # - kong-ssl-cert

  proxy:
    enabled: true
    type: LoadBalancer
    
    http:
      enabled: true
      servicePort: 8000
      containerPort: 8000
    tls:
      enabled: false
      servicePort: 8443
      containerPort: 8443
      parameters:
        - http2
    labels:
      enable-metrics: "true"

  admin:
    enabled: false

  portal:
    enabled: false

  portalapi:
    enabled: false

  manager:
    enabled: false

  ingressController:
    enabled: false

  enterprise:
    enabled: true
    #license_secret: kong-enterprise-license
    vitals:
      enabled: true

  status:
    enabled: true
    http:
      enabled: true
      containerPort: 8100
    tls:
      containerPort: 8543
      enabled: false

  # only if pod not enough to initiate
  readinessProbe:
    initialDelaySeconds: 100

  livenessProbe:
    initialDelaySeconds: 100

kongcp:
  env:
    database: "postgres"
    pg_host: kongpg-postgresql.pg.svc.cluster.local
    pg_user: postgres
    pg_database: kong
    pg_password:
      valueFrom:
        secretKeyRef:
          name: kong-enterprise-postgres-password
          key: password
    #admin_api_uri: https://api.manager.stargate.starsweb.io
    #admin_gui_url: https://manager.stargate.starsweb.io
    portal_api_url: https://api.stargate.starsweb.io
    portal_gui_protocol: http
    portal_gui_host: portal.stargate.starsweb.io
    portal_cors_origins: "*"

    portal_auto_approve: on
    
    lua_ssl_trusted_certificate: /etc/secrets/kong-cp-cert/tls.crt
    lua_ssl_verify_depth: 2
    log_level: debug
    opentelemetry_tracing: all
    opentelemetry_tracing_sampling_rate: 1
    vitals: on
    role: control_plane

   # Cluster certs settings for CP-DP
    cluster_mtls: "pki"
    cluster_cert: /etc/secrets/kong-cp-cert/tls.crt
    cluster_cert_key: /etc/secrets/kong-cp-cert/tls.key
    cluster_ca_cert: /etc/secrets/kong-cp-cert/ca.crt

    anonymous_reports: "off"
    #untrusted_lua: "off"
    password:
      valueFrom:
        secretKeyRef:
          name: kong-enterprise-superuser-password
          key: password

    #portal_auth: basic-auth
    # portal_auth: openid-connect
    portal_auth_conf:
      valueFrom:
        secretKeyRef:
          name: kong-auth-conf
          key: portal_auth_conf
    portal_session_conf:
      valueFrom:
        secretKeyRef:
          name: kong-session-conf
          key: portal_session_conf

  image:
     repository: kong/kong-gateway
     tag: "3.1"
     pullPolicy: IfNotPresent
  # Specify Kong admin API service and listener configuration
  admin:
    enabled: true
    type: LoadBalancer
    http:
      enabled: true
      servicePort: 8001
      containerPort: 8001
      parameters: []
    tls:
      enabled: true
      servicePort: 8444
      containerPort: 8444
      parameters:
        - http2
        - ssl
    ingress:
      enabled: false
      

  status:
    http:
      enabled: true
      containerPort: 8100

  cluster:
    enabled: true
    annotations: {}
    tls:
      enabled: true
      servicePort: 8005
      containerPort: 8005
      parameters: []
    type: ClusterIP
    externalIPs: []

    
  secretVolumes:
    - kong-cp-cert
    # - kong-ca-cert
    # - kong-ssl-cert

  waitImage:
    pullPolicy: IfNotPresent
    lifecycle:
    preStop:
      exec:
        command: ["/bin/sh", "-c", "/bin/sleep 15 && kong quit"]

  serviceMonitor:
    enabled: true

  enterprise:
    enabled: true
    license_secret: kong-enterprise-license
    vitals:
      enabled: true
    portal:
      enabled: true
    rbac:
      enabled: false
      # admin_gui_auth: openid-connect
      # admin_gui_auth: basic-auth
      session_conf_secret: kong-session-conf
      admin_gui_auth_conf_secret: kong-auth-conf

  manager:
    enabled: true
    type: LoadBalancer

    http:
      enabled: true
      servicePort: 8002
      containerPort: 8002
      parameters: []

    tls:
      enabled: true
      servicePort: 8445
      containerPort: 8445
      parameters:
      - http2
      - ssl

    ingress:
      enabled: false
      # hostname: manager.local.lan
      # annotations: 
      #   kubernetes.io/ingress.class: kong
      #   konghq.com/protocols: https
      # tls:
      #   kong-ssl-cert


    externalIPs: []

  portal:
    enabled: true
    type: LoadBalancer

    http:
      enabled: true
      servicePort: 8003
      containerPort: 8003
      parameters: []

    tls:
      enabled: true
      servicePort: 8446
      containerPort: 8446
      parameters:
      - http2
      - ssl

    ingress:
      enabled: false

    externalIPs: []

  portalapi:
    enabled: true
    type: LoadBalancer

    http:
      enabled: true
      servicePort: 8004
      containerPort: 8004
      parameters: []

    tls:
      enabled: true
      servicePort: 8447
      containerPort: 8447
      parameters:
      - http2
      - ssl

    ingress:
      enabled: false

    externalIPs: []

  clustertelemetry:
    enabled: true
    tls:
      enabled: true
      servicePort: 8006
      containerPort: 8006
      parameters: []
    type: ClusterIP
    externalIPs: []

  proxy:
    enabled: false

  ingressController:
    enabled: false

  # only if pod not enough to initiate
  readinessProbe:
    initialDelaySeconds: 100

  livenessProbe:
    initialDelaySeconds: 100
    
  # To Run postgres as subchart
  # postgresql:
  #   enabled: true
  #   postgresqlUsername: kong
  #   postgresqlDatabase: kong
  #   postgresqlPassword: kong
  #   service:
  #     port: 5432
